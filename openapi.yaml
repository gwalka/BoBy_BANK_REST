---
openapi: 3.0.1
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- bearerAuth: []
paths:
  "/cards/{cardId}/block":
    post:
      tags:
      - user-card-controller
      summary: Запрос на блокировку карты
      description: Отправляет запрос на блокировку карты. Может возникнуть ошибка
        при неправильной операции с картой или при отсутствии доступа.
      operationId: blockCardRequest
      parameters:
      - name: cardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Запрос на блокировку карты выполнен
          content:
            "*/*":
              schema:
                type: string
        '403':
          description: Доступ запрещён
          content:
            "*/*":
              schema:
                type: string
        '404':
          description: Карта не найдена
          content:
            "*/*":
              schema:
                type: string
  "/cards/transfer":
    post:
      tags:
      - user-card-controller
      summary: Перевод средств
      description: Выполняет перевод средств с одной карты на другую в рамках одного
        аккаунта.Может возникнуть ошибка при отсутствии доступа или небезопасной операции.
      operationId: transferFunds
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransferRequestDto"
        required: true
      responses:
        '200':
          description: Перевод успешно выполнен
          content:
            "*/*":
              schema:
                type: string
        '403':
          description: Доступ запрещён или небезопасная операция
          content:
            "*/*":
              schema:
                type: string
  "/auth/register":
    post:
      tags:
      - auth-controller
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя. Может выбросить ошибку валидации
        данных.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRegisterDto"
        required: true
      responses:
        '200':
          description: Успешная регистрация
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: Ошибка валидации данных
          content:
            "*/*":
              schema:
                type: string
  "/auth/login":
    post:
      tags:
      - auth-controller
      summary: Авторизация пользователя
      description: Выполняет вход пользователя и возвращает токен.Может выбросить
        ошибку валидации данных или при неверных учетных данных.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserLoginDto"
        required: true
      responses:
        '200':
          description: Успешный вход и получение токена
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: string
        '400':
          description: Ошибка валидации данных
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: string
        '401':
          description: Неверные учетные данные
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: string
  "/admin/cards/{cardId}/block":
    post:
      tags:
      - admin-card-controller
      summary: Заблокировать карту
      operationId: blockCard
      parameters:
      - name: cardId
        in: path
        description: ID карты для блокировки
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Карта успешно заблокирована
        '401':
          description: Не авторизован
        '403':
          description: Нет прав доступа
        '404':
          description: Карта не найдена
        '409':
          description: Карта уже заблокирована
  "/admin/cards/{cardId}/activate":
    post:
      tags:
      - admin-card-controller
      summary: Активировать карту
      operationId: activateCard
      parameters:
      - name: cardId
        in: path
        description: ID карты для активации
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Карта успешно активирована
        '401':
          description: Неавторизован
        '403':
          description: Нет прав доступа
        '404':
          description: Карта не найдена
  "/admin/cards/create":
    post:
      tags:
      - admin-card-controller
      summary: Создать новую карту для пользователя
      operationId: createCard
      parameters:
      - name: userId
        in: query
        description: ID пользователя, для которого создаётся карта
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Карта успешно создана
        '400':
          description: Некорректный запрос
        '401':
          description: Не авторизован
        '403':
          description: Нет прав доступа
        '404':
          description: Не найден пользователь с таким id
  "/cards/{cardId}/digits":
    get:
      tags:
      - user-card-controller
      summary: Получить полный номер карты
      description: Возвращает полный номер карты.Может возникнуть ошибка, если карта
        не найдена или доступ запрещён.
      operationId: getFullCardNumber
      parameters:
      - name: cardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Полный номер карты успешно получен
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardDigitsDto"
        '403':
          description: Доступ запрещён
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardDigitsDto"
        '404':
          description: Карта не найдена
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardDigitsDto"
  "/cards/{cardId}/balance":
    get:
      tags:
      - user-card-controller
      summary: Получить баланс карты
      description: Возвращает текущий баланс карты.Может возникнуть ошибка при отсутствии
        доступа или если карта не найдена.
      operationId: getBalance
      parameters:
      - name: cardId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Баланс карты успешно получен
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BalanceResponseDto"
        '403':
          description: Доступ запрещён
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BalanceResponseDto"
        '404':
          description: Карта не найдена
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/BalanceResponseDto"
  "/cards/cards":
    get:
      tags:
      - user-card-controller
      summary: Получить список своих карт
      description: Возвращает постраничный список карт пользователя.
      operationId: getMyCards
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 2
      - name: search
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Список карт успешно получен
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCardUserDto"
  "/admin/cards/":
    get:
      tags:
      - admin-card-controller
      summary: Получить все карты (с пагинацией)
      operationId: getAllCards
      parameters:
      - name: page
        in: query
        description: Номер страницы (начинается с 0)
        required: false
        schema:
          type: integer
          format: int32
          default: 0
        example: 0
      - name: size
        in: query
        description: Размер страницы
        required: false
        schema:
          type: integer
          format: int32
          default: 10
        example: 10
      responses:
        '200':
          description: Страница карт успешно получена
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCardAdminDto"
        '401':
          description: Не авторизован
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCardAdminDto"
        '403':
          description: Нет прав доступа
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCardAdminDto"
  "/admin/cards/{cardId}":
    delete:
      tags:
      - admin-card-controller
      summary: Удалить карту
      operationId: deleteCard
      parameters:
      - name: cardId
        in: path
        description: ID карты для удаления
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Карта успешно удалена
        '401':
          description: Неавторизован
        '403':
          description: Нет прав доступа
        '404':
          description: Карта не найдена
components:
  schemas:
    TransferRequestDto:
      required:
      - amount
      - fromCardId
      - toCardId
      type: object
      properties:
        fromCardId:
          type: integer
          description: ID карты, с которой будут списаны деньги
          format: int64
          example: 1001
        toCardId:
          type: integer
          description: ID карты, на которую будут зачислены деньги
          format: int64
          example: 1002
        amount:
          type: number
          description: Сумма перевода
          example: 500
      description: Запрос на перевод средств между картами одного аккаунта
    UserRegisterDto:
      required:
      - firstName
      - lastName
      - password
      - username
      type: object
      properties:
        email:
          maxLength: 64
          minLength: 0
          type: string
          description: Электронная почта пользователя
          example: user@example.com
        firstName:
          maxLength: 32
          minLength: 0
          type: string
          description: Имя пользователя
          example: Иван
        lastName:
          maxLength: 32
          minLength: 0
          type: string
          description: Фамилия пользователя
          example: Иванов
        username:
          maxLength: 64
          minLength: 0
          type: string
          description: Уникальное имя пользователя
          example: ivan123
        password:
          maxLength: 64
          minLength: 8
          type: string
          description: Пароль пользователя
          example: P@ssw0rd123
      description: Данные для регистрации нового пользователя
    UserLoginDto:
      required:
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 64
          minLength: 0
          type: string
          description: Имя пользователя
          example: user123
        password:
          maxLength: 64
          minLength: 8
          type: string
          description: Пароль пользователя
          example: P@ssw0rd123
      description: Данные для авторизации пользователя
    CardDigitsDto:
      type: object
      properties:
        id:
          type: integer
          description: Уникальный идентификатор карты
          format: int64
          example: 123
        fullNumber:
          type: string
          description: Полный номер карты
          example: 1234 5678 9012 3456
      description: DTO, содержащий полный номер карты
    BalanceResponseDto:
      type: object
      properties:
        cardId:
          type: integer
          description: Идентификатор карты
          format: int64
          example: 12345
        maskedNum:
          type: string
          description: Замаскированный номер карты
          example: "**** **** **** 1234"
        balance:
          type: number
          description: Текущий баланс карты
          example: 15000.75
      description: Информация о балансе по карте
    CardUserDto:
      type: object
      properties:
        id:
          type: integer
          description: Уникальный идентификатор карты
          format: int64
          example: 123
        maskedNum:
          type: string
          description: Маскированный номер карты
          example: 1234 **** **** 5678
        expDate:
          type: string
          description: Дата истечения срока действия карты
          format: date
          example: '2027-12-31'
        balance:
          type: number
          description: Баланс на карте
          example: 1500.5
        status:
          type: string
          description: Статус карты
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
      description: DTO с информацией о карте пользователя
    PageCardUserDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/CardUserDto"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          "$ref": "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    CardAdminDto:
      type: object
      properties:
        id:
          type: integer
          description: Уникальный идентификатор карты
          format: int64
          example: 101
        maskedNum:
          type: string
          description: Замаскированный номер карты
          example: "**** **** **** 5678"
        userId:
          type: integer
          description: Идентификатор пользователя, которому принадлежит карта
          format: int64
          example: 202
        expDate:
          type: string
          description: Дата окончания действия карты
          format: date
          example: '2028-08-31'
        status:
          type: string
          description: Статус карты
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
      description: Информация о карте для администратора
    PageCardAdminDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/CardAdminDto"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
